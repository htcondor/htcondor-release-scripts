#!/bin/bash

batlab='condorauto@batlab.chtc.wisc.edu'

usage() {
    echo "Usage: $(basename $0) area version build_id repo build_date"
    echo
    echo area examples: public private test
    echo version examples: 8.8.2, 8.9.1
    echo build_id example: 543234
    echo repo examples: release, rc, update, daily
    echo build_date example: 20201019

}
if [ $# -ne 5 ]; then
    usage
    exit 1
fi

area=$1
version=$2
build_id=$3
repo=$4
build_date="-${5}"

echo "Area: ${1}, Version: ${version}, Build ID: ${build_id}, Repo: ${repo}, Build Date: ${5}"

read -p "Continue? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi

. $(dirname $0)/common.sh

aptly="aptly -config=$(dirname $0)/aptly${suffix}.conf"

if [ $repo = 'release' ]; then
    build_date=""
fi

win64=10
macosx=15

base="/tmp/condor_${version}-${build_id}"
input="${base}/public"
tarball="/p/condor/public/html/htcondor/tarball${suffix}/${repo_version}/${version}/${repo}"
tarball_current="/p/condor/public/html/htcondor/tarball${suffix}/${repo_version}/current"

ssh $batlab "cd /scratch && /scratch/tim/new_stage $version $build_id"
ssh $batlab "cd /scratch/condor_${version}-${build_id} && ./get_${build_id}"
rsync -av $batlab:/scratch/condor_${version}-${build_id} /tmp/

files=$(cd /tmp/condor_${version}-${build_id}/public; find -name \*${version}-\* | wc -l)

if [ $files -eq 0 ]; then
    echo Version mismatch!
    ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
    echo Clean up temp space
    rm -rf ${base}
    exit 1
fi

#Verify downloads
echo Checking for all platforms...

# Plaforms going away
if [ "${major_ver}.${minor_ver}" = "9.0" ]; then
    for platform in x86_64_Debian9; do
        if [ ! -d ${input}/${platform} ]; then
            echo ERROR: $platform not present!
        fi
    done
fi

for platform in x86_64_AmazonLinux2 \
                x86_64_CentOS7 x86_64_CentOS8 \
                x86_64_Debian10 \
                x86_64_MacOSX${macosx} \
                x86_64_Ubuntu18 x86_64_Ubuntu20 \
                x86_64_Windows${win64}; do
    if [ ! -d ${input}/${platform} ]; then
        echo ERROR: $platform not present!
    fi
done

read -p "Continue? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
    echo Clean up temp space
    rm -rf ${base}
    exit 1
fi

if [ $repo = 'release' -o $repo = 'update' ]; then
    if [ $area != 'test' ]; then
        ssh $batlab nmi_pin --days=365 --force ${build_id}
    else
        ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
    fi
else
    ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
fi

# Move tarballs into place
echo Publish tarballs...
# rm -rf ${tarball}
mkdir -p ${tarball}
mkdir -p ${tarball_current}

platforms="x86_64_AmazonLinux2 x86_64_CentOS7 x86_64_CentOS8 x86_64_Debian10 x86_64_Ubuntu18 x86_64_Ubuntu20"
if [ $repo = 'daily' ]; then
    platforms="$platforms x86_64_Fedora32"
fi

# Platforms on the way out
if [ "${major_ver}.${minor_ver}" = "9.0" ]; then
    platforms="$platforms x86_64_Debian9"
fi

for platform in $platforms; do
    echo ======= $platform =======
    mv ${input}/${platform}/condor-${version}*-${platform}-stripped.tar.gz \
       ${tarball}/condor-${version}${build_date}-${platform}-stripped.tar.gz
    if [ $repo = 'release' ]; then
        ln -sf ../${version}/release/condor-${version}-${platform}-stripped.tar.gz \
            ${tarball_current}/condor-${platform}-stripped.tar.gz
    fi
done

echo ======= x86_64_MacOSX =======
mv ${input}/x86_64_MacOSX${macosx}/condor-${version}*-x86_64_MacOSX${macosx}-stripped.tar.gz \
   ${tarball}/condor-${version}${build_date}-x86_64_MacOSX-stripped.tar.gz
if [ $repo = 'release' ]; then
    ln -sf ../${version}/release/condor-${version}-x86_64_MacOSX-stripped.tar.gz \
        ${tarball_current}/condor-x86_64_MacOSX-stripped.tar.gz
fi


echo ======= x86_64_Windows =======
mv ${input}/x86_64_Windows${win64}/condor-${version}-${build_id}-Windows${win64}-x64.zip \
   ${tarball}/condor-${version}${build_date}-Windows-x64.zip
if [ $repo = 'release' ]; then
    ln -sf ../${version}/release/condor-${version}-Windows-x64.zip \
        ${tarball_current}/condor-Windows-x64.zip
fi

mv ${input}/x86_64_Windows${win64}/condor-${version}-${build_id}-Windows${win64}-x64.msi \
   ${tarball}/condor-${version}${build_date}-Windows-x64.msi
if [ $repo = 'release' ]; then
    ln -sf ../${version}/release/condor-${version}-Windows-x64.msi \
        ${tarball_current}/condor-Windows-x64.msi
fi

# Copy source tarball from most earliest Debian build
if [ "${major_ver}.${minor_ver}" = "9.0" ]; then
    src_platform="x86_64_Debian9"
else
    src_platform="x86_64_Debian10"
fi
cp -p ${input}/${src_platform}/condor_${version}.orig.tar.gz \
      ${tarball}/condor-${version}${build_date}-src.tar.gz
if [ $repo = 'release' ]; then
    ln -sf ../${version}/release/condor-${version}-src.tar.gz \
        ${tarball_current}/condor-src.tar.gz
fi

echo Sign tarballs...
(cd ${tarball} && rm -f sha256sum.txt.gpg)
(cd ${tarball} && sha256sum *${version}${build_date}* >> sha256sum.txt)
(cd ${tarball} && gpg --sign -u 0x$key sha256sum.txt)
if [ $repo = 'release' ]; then
    ln -sf ../${version}/release/sha256sum.txt ${tarball_current}
    ln -sf ../${version}/release/sha256sum.txt.gpg ${tarball_current}
fi

# Move RPMs into place
$(dirname $0)/publish-rpms ${input} ${area} ${version} ${repo}

# Update Debian/Ubuntu repositories
$(dirname $0)/publish-debs ${input} ${area} ${version} ${repo}

# Clean up temp space
echo Clean up temp space
rm -rf ${base}
