#!/bin/bash

batlab='condorauto@batlab-ap2001.chtc.wisc.edu'

usage() {
    echo "Usage: $(basename $0) area version build_id repo"
    echo
    echo area examples: public private security test
    echo version examples: 8.8.2, 8.9.1
    echo build_id example: 543234
    echo repo examples: snapshot, daily, alpha, rc, beta, update, release

}
if [ $# -ne 4 ]; then
    usage
    exit 1
fi

tcsymlink() {
    if [ -f ${tarball_current}/$1 ]; then
        ln -sf $1 $2
    fi
}

area=$1
version=$2
build_id=$3
repo=$4

echo "Area: ${1}, Version: ${version}, Build ID: ${build_id}, Repo: ${repo}"

read -p "Continue? [Y/n] " -n 1 -r
echo
if [[ $REPLY =~ ^[Nn]$ ]]
then
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi

. $(dirname $0)/common.sh

base="/nobackup/tim/batlab/condor_${version}-${build_id}"
input="${base}/public"
tarball="${web_dir}/tarball${suffix}/${repo_version}/${version}/${repo}"
tarball_current="${web_dir}/tarball${suffix}/${repo_version}/current"

echo "Disk usage for ${tarball_current}"
if [ -d /p/condor/public/html/htcondor ]; then
    fs lq -human ${tarball_current}
elif [ -d /htcss/htcondor ]; then
    df -h ${tarball_current}
fi
echo

if [ ! -d /nobackup/tim/batlab/condor_${version}-${build_id}/public ]; then
    ssh $batlab "cd /scratch && /scratch/tim/new_stage $version $build_id"
    ssh $batlab "cd /scratch/condor_${version}-${build_id} && ./get_${build_id}"
    rsync -av $batlab:/scratch/condor_${version}-${build_id} /nobackup/tim/batlab/
fi

files=0
if [ -d /nobackup/tim/batlab/condor_${version}-${build_id}/public ]; then
    files=$(cd /nobackup/tim/batlab/condor_${version}-${build_id}/public; find -name \*${version}-\* | wc -l)
fi

if [ $files -eq 0 ]; then
    echo Version mismatch!
    ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
    echo Clean up temp space
    rm -rf ${base}
    exit 1
fi

# Windows 9 platform is really Windows 10
win64=9
macos=13

# These are Linux platforms. Mac and Window platforms are handled specially.
platforms="aarch64_AlmaLinux8 \
           aarch64_AlmaLinux9 \
           aarch64_AlmaLinux10 \
           ppc64le_AlmaLinux8 \
           x86_64_AlmaLinux8 \
           x86_64_AlmaLinux9 \
           x86_64_AlmaLinux10 \
           x86_64_AmazonLinux2023 \
           x86_64_Debian11 \
           x86_64_Debian12 \
           x86_64_Fedora41 \
           x86_64_openSUSE15 \
           x86_64_Ubuntu22 \
           x86_64_Ubuntu24 \
           x86_64_v2_AlmaLinux10"

if [ "${major_ver}.${minor_ver}" = "24.0" ]; then
    platforms="aarch64_AlmaLinux8 \
               aarch64_AlmaLinux9 \
               aarch64_AlmaLinux10 \
               ppc64le_AlmaLinux8 \
               x86_64_AlmaLinux8 \
               x86_64_AlmaLinux9 \
               x86_64_AlmaLinux10 \
               x86_64_AmazonLinux2023 \
               x86_64_Debian11 \
               x86_64_Debian12 \
               x86_64_openSUSE15 \
               x86_64_Ubuntu20 \
               x86_64_Ubuntu22 \
               x86_64_Ubuntu24 \
               x86_64_v2_AlmaLinux10"
fi

# Platforms for previous versions
if [ "${major_ver}" = "23" ]; then
platforms="aarch64_AlmaLinux8 \
           aarch64_AlmaLinux9 \
           ppc64le_AlmaLinux8 \
           x86_64_AlmaLinux8 \
           x86_64_AlmaLinux9 \
           x86_64_AmazonLinux2023 \
           x86_64_CentOS7 \
           x86_64_Debian11 \
           x86_64_Debian12 \
           x86_64_Fedora40 \
           x86_64_openSUSE15 \
           x86_64_Ubuntu20 \
           x86_64_Ubuntu22 \
           x86_64_Ubuntu24"
fi

if [ "${major_ver}.${minor_ver}" = "23.0" ]; then
    platforms="aarch64_AlmaLinux8 \
               aarch64_AlmaLinux9 \
               ppc64le_AlmaLinux8 \
               x86_64_AlmaLinux8 \
               x86_64_AlmaLinux9 \
               x86_64_AmazonLinux2023 \
               x86_64_CentOS7 \
               x86_64_Debian11 \
               x86_64_Debian12 \
               x86_64_openSUSE15 \
               x86_64_Ubuntu20 \
               x86_64_Ubuntu22 \
               x86_64_Ubuntu24"
fi

if [ "${major_ver}" = "10" ]; then
    platforms="aarch64_AlmaLinux8 \
               aarch64_AlmaLinux9 \
               ppc64le_AlmaLinux8 \
               ppc64le_Ubuntu20 \
               x86_64_AlmaLinux8 \
               x86_64_AlmaLinux9 \
               x86_64_AmazonLinux2023 \
               x86_64_CentOS7 \
               x86_64_Debian11 \
               x86_64_Debian12 \
               x86_64_Fedora38 \
               x86_64_Ubuntu20 \
               x86_64_Ubuntu22"
fi

if [ "${major_ver}.${minor_ver}" = "10.0" ]; then
    win64=10
    platforms="aarch64_AlmaLinux8 \
               ppc64le_AlmaLinux8 \
               ppc64le_Ubuntu20 \
               x86_64_AlmaLinux8 \
               x86_64_CentOS7 \
               x86_64_Debian11 \
               x86_64_Ubuntu20 \
               x86_64_Ubuntu22"
fi

# Platforms for previous versions
if [ "${major_ver}.${minor_ver}" = "9.0" ]; then
    win64=10
    platforms="x86_64_AmazonLinux2 \
               x86_64_CentOS7 \
               x86_64_Debian10 \
               x86_64_Debian11 \
               x86_64_Rocky8 \
               x86_64_Ubuntu18"
fi

#Verify downloads
echo Checking for all platforms...
missing=0

for platform in $platforms x86_64_macOS${macos} x86_64_Windows${win64}; do
    if [ ! -d ${input}/${platform} ]; then
        echo ERROR: $platform not present!
        missing=1
    fi
done

if [ $missing -eq 1 ]; then
    read -p "Continue? [Y/n] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]
    then
        ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
        echo Clean up temp space
        rm -rf ${base}
        exit 1
    fi
fi

if [ $repo = 'release' ]; then
    if [ $area != 'test' ]; then
        ssh $batlab nmi_pin --days=365 --force ${build_id}
    else
        ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
    fi
else
    ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
fi

# Move tarballs into place
echo Publish tarballs...
rm -rf ${tarball}
mkdir -p ${tarball}
mkdir -p ${tarball_current}

if [ $area = 'security' ]; then
    # Suppress sources for security builds
    echo "Removing sources from security release"
    find $input -name \*.orig.tar.gz -print -exec rm -f {} +
    find $input -name \*.src.rpm -print -exec rm -f {} +
else
    # Copy source tarball from most earliest Debian build
    if [ "${major_ver}.${minor_ver}" = "9.0" ]; then
        src_platform="x86_64_Debian10"
    else
        src_platform="x86_64_Debian11"
    fi

    # Check for source tarball
    if [ ! -f ${input}/${src_platform}/condor_${version}.orig.tar.gz ]; then
        echo ERROR: no source tarball
        read -p "Continue? [Y/n] " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Nn]$ ]]
        then
            ssh $batlab rm -rf /scratch/condor_${version}-${build_id}
            echo Clean up temp space
            rm -rf ${base}
            exit 1
        fi
    fi

    cp -a ${input}/${src_platform}/condor_${version}.orig.tar.gz \
          ${tarball}/condor-${version}-src.tar.gz

    if [ $repo = 'release' ]; then
        tcsymlink ../${version}/release/condor-${version}-src.tar.gz \
                  ${tarball_current}/condor-src.tar.gz
    fi
fi

for platform in $platforms; do
    echo ======= $platform =======
    if [ $platform = 'x86_64_CentOS7' ] && [ "${major_ver}" = '23' ] && [ "${minor_ver}" != '0' ]; then
        $(dirname $0)/repack-tarball ${input}/${platform}/condor-${version}*-${platform}-stripped.tar.gz
    fi
    cp -a ${input}/${platform}/condor-${version}*-${platform}-stripped.tar.gz \
          ${tarball}/condor-${version}-${platform}-stripped.tar.gz
    if [ $repo = 'release' ]; then
        tcsymlink ../${version}/release/condor-${version}-${platform}-stripped.tar.gz \
                  ${tarball_current}/condor-${platform}-stripped.tar.gz
    fi
done

echo ======= x86_64_macOS${macos} =======
cp -a ${input}/x86_64_macOS${macos}/condor-${version}*-x86_64_macOS${macos}-stripped.tar.gz \
      ${tarball}/condor-${version}-x86_64_macOS${macos}-stripped.tar.gz
if [ $repo = 'release' ]; then
    tcsymlink ../${version}/release/condor-${version}-x86_64_macOS${macos}-stripped.tar.gz \
              ${tarball_current}/condor-x86_64_macOS${macos}-stripped.tar.gz
fi


echo ======= x86_64_Windows =======
cp -a ${input}/x86_64_Windows${win64}/condor-${version}-${build_id}-Windows${win64}-x64.zip \
      ${tarball}/condor-${version}-Windows-x64.zip
if [ $repo = 'release' ]; then
    tcsymlink ../${version}/release/condor-${version}-Windows-x64.zip \
              ${tarball_current}/condor-Windows-x64.zip
fi

cp -a ${input}/x86_64_Windows${win64}/condor-${version}-${build_id}-Windows${win64}-x64.msi \
      ${tarball}/condor-${version}-Windows-x64.msi
if [ $repo = 'release' ]; then
    tcsymlink ../${version}/release/condor-${version}-Windows-x64.msi \
              ${tarball_current}/condor-Windows-x64.msi
fi

echo Sign tarballs...
(cd ${tarball} && rm -f sha256sum.txt.gpg)
(cd ${tarball} && sha256sum *${version}* > sha256sum.txt)
(cd ${tarball} && gpg --sign -u 0x$key sha256sum.txt)
if [ $repo = 'release' ]; then
    tcsymlink ../${version}/release/sha256sum.txt ${tarball_current}
    tcsymlink ../${version}/release/sha256sum.txt.gpg ${tarball_current}
fi

# Drop in compatibility symlink
if [ "$repo" = 'alpha' ]; then
   ln -sf alpha "${web_dir}/tarball${suffix}/${repo_version}/${version}/rc"
elif [ "$repo" = 'beta' ]; then
   ln -sf beta "${web_dir}/tarball${suffix}/${repo_version}/${version}/update"
elif [ "$repo" = 'snapshot' ]; then
   ln -sf snapshot "${web_dir}/tarball${suffix}/${repo_version}/${version}/daily"
fi

# Clean out old tarballs
if [ "$repo" = 'rc' -o "$repo" = 'alpha' ]; then
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/snapshot"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/daily"
elif [ "$repo" = 'update' -o "$repo" = 'beta' ]; then
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/snapshot"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/daily"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/alpha"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/rc"
elif [ "$repo" = 'release' ]; then
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/snapshot"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/daily"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/alpha"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/rc"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/beta"
    rm -rf "${web_dir}/tarball${suffix}/${repo_version}/${version}/update"
fi

# Move RPMs into place
$(dirname $0)/publish-rpms -y ${input} ${area} ${version} ${repo}

# Update Debian/Ubuntu repositories
$(dirname $0)/publish-debs -y ${input} ${area} ${version} ${repo}

# Clean up temp space
if [ "$repo" = "release" ]; then
    echo Clean up temp space
    rm -rf ${base}
fi
