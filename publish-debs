#!/bin/bash
# Usage: publish-debs deb-directory area version repo

usage() {
    echo "Usage: $(basename $0) input area version repo"
    echo
    echo input example: /nobackup/tim/externals/9.1
    echo area examples: public private test
    echo version examples: 8.8.2, 8.9.1
    echo repo examples: release, rc, update, daily

}
if [ $# -ne 4 ]; then
    usage
    exit 1
fi

input=$1
area=$2
version=$3
repo=$4

if [ ! -d $1 ]; then
    echo ERROR: no $1 directory
    usage
    exit 1
fi

echo "Input: ${input} Area: ${area}, Version: ${version}, Repo: ${repo}"
read -p "Continue? " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi

. $(dirname $0)/common.sh

aptly="aptly -config=$(dirname $0)/aptly${suffix}.conf"

# Update Debian/Ubuntu repositories

drop_deb_publish () {
    distro=$1
    code_name=$2

    if $(${aptly} publish show $code_name $distro/$deb_repo_name > /dev/null 2>&1); then
        ${aptly} publish drop $code_name $distro/$deb_repo_name
    fi
}

drop_deb_repo () {
    distro=$1
    code_name=$2

    if $(${aptly} repo show $deb_repo_name-$code_name > /dev/null 2>&1); then
        ${aptly} repo drop $deb_repo_name-$code_name
    fi
}

publish_deb_repo () {
    platform_name=$1
    distro=$2
    code_name=$3

    if ! $(${aptly} repo show $deb_repo_name-$code_name > /dev/null 2>&1); then
        ${aptly} repo create --distribution=$code_name $deb_repo_name-$code_name
    fi
    # Be sure to add the necessary externals
    ${aptly} repo add $deb_repo_name-$code_name /nobackup/tim/externals/${repo_version}/${platform_name}
    ${aptly} repo add $deb_repo_name-$code_name ${input}/${platform_name}

    if $(${aptly} publish show $code_name $distro/$deb_repo_name > /dev/null 2>&1); then
        ${aptly} publish update -gpg-key=$key $code_name $distro/$deb_repo_name
    else
        ${aptly} publish repo -gpg-key=$key $deb_repo_name-$code_name $distro/$deb_repo_name
    fi
}

update_deb_repo () {
    platform_name=$1
    distro=$2
    code_name=$3

    deb_repo_name=${repo_version}
    if [ $repo != 'release' ]; then
        deb_repo_name=${deb_repo_name}-${repo}

        echo "======= Dropping ${deb_repo_name} $distro $code_name ======="
        drop_deb_publish $distro $code_name
        drop_deb_repo $distro $code_name
        ${aptly} db cleanup
    fi

    echo "======= Updating ${deb_repo_name} $distro $code_name ======="
    publish_deb_repo $platform_name $distro $code_name

    # Put the new files in the pool
    rsync -av /nobackup/tim/aptly${suffix}/public/${distro}/${deb_repo_name}/pool /p/condor/public/html/htcondor/repo${suffix}/${distro}/${deb_repo_name}/
    # Update the dists to point to the new files
    rsync -av /nobackup/tim/aptly${suffix}/public/${distro}/${deb_repo_name}/dists /p/condor/public/html/htcondor/repo${suffix}/${distro}/${deb_repo_name}/
    # Delete any old files
    rsync -av --delete /nobackup/tim/aptly${suffix}/public/${distro}/${deb_repo_name} /p/condor/public/html/htcondor/repo${suffix}/${distro}/

}

echo ======= Updating ${repository} =======
pushd $input
dirs=$(echo *)
popd
for dir in $dirs; do
    if [ $dir = 'x86_64_Debian9' ]; then
        update_deb_repo "x86_64_Debian9" "debian" "stretch"
    elif [ $dir = 'x86_64_Debian10' ]; then
        update_deb_repo "x86_64_Debian10" "debian" "buster"
    elif [ $dir = 'x86_64_Debian11' ]; then
        update_deb_repo "x86_64_Debian11" "debian" "bullseye"
    elif [ $dir = 'x86_64_Debian12' ]; then
        update_deb_repo "x86_64_Debian12" "debian" "bookworm"
    elif [ $dir = 'x86_64_Ubuntu18' ]; then
        update_deb_repo "x86_64_Ubuntu18" "ubuntu" "bionic"
    elif [ $dir = 'x86_64_Ubuntu20' ]; then
        update_deb_repo "x86_64_Ubuntu20" "ubuntu" "focal"
    elif [ $dir = 'x86_64_Ubuntu22' ]; then
        update_deb_repo "x86_64_Ubuntu22" "ubuntu" "jammy"
    fi
done
